# -*- coding: utf-8 -*-
"""Fake News Detection: Python/ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hqq4lNoBfOGQDaAklotcOHnuk3VMGaGv
"""

import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

df = pd.read_csv('/content/news.csv')
print(df.shape)
display(df.head())

# Get accurate labels from dataframe
labels=df.label
labels.head()

# Split into training and testing sets
x_train,x_test,y_train,y_test=train_test_split(df['text'], labels, test_size=0.2, random_state=7)

# Initialize a TfidfVectorizer
tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)

# Train and transform the training set, and transform test set
tfidf_train=tfidf_vectorizer.fit_transform(x_train)
tfidf_test=tfidf_vectorizer.transform(x_test)

# Initialize the PAC
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Make predictions on the test set and calculate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f"Accuracy: {round(score*100,2)}%")

"""For this model we have 587 true positives, 51 false positives, and 43 false negatives."""

# Confusion Matrix to get insight on
# the number of false and true negatives and positives
confusion_matrix(y_test, y_pred, labels=["FAKE", "REAL"])
print(confusion_matrix(y_test, y_pred))